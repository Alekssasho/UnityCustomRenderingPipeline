
#include "../ShaderLibrary/Common.hlsl"

RWTexture2D<float4> RenderTarget;

#pragma max_recursion_depth 1

struct RayPayload {
    float4 color;
};

float g_AspectRatio;
RaytracingAccelerationStructure g_AccelStructure;

[shader("raygeneration")]
void MyRaygenShader()
{
    uint2 launchIdx = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    float2 ndcCoords = (launchIdx / float2(launchDim.x - 1, launchDim.y - 1)) * 2 - float2(1, 1);
    float3 viewDirection = normalize(float3(ndcCoords.x * g_AspectRatio, ndcCoords.y, 1));
    RayDesc ray;
    ray.Origin = _WorldSpaceCameraPos;
    ray.Direction = mul((float3x3)unity_CameraToWorld, viewDirection);
    ray.TMin = 0;
    ray.TMax = 1e20f;

    RayPayload payload;
    payload.color = float4(0.0, 0.0, 0.0, 0.0);

    TraceRay(g_AccelStructure, 0, 0xFF, 0, 1, 0, ray, payload);
   
    RenderTarget[launchIdx] = payload.color;
}

[shader("miss")]
void MissShader(inout RayPayload payload : SV_RayPayload)
{
    payload.color = float4(0.0, 0.0, 1.0, 0.0);
}
